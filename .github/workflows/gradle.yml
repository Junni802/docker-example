# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]


permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
#    - name: Generate and submit dependency graph
#      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      # Docker build & Push
      - name: Docker build & push to Docker hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/exaple-docker .
          docker push ${{ secrets.DOCKER_USERNAME }}/exaple-docker

        # EC2 배포
      - name: Docker image pull & Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.KEY }} # pem 키
          # 도커 작업
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/exaple-docker:latest
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/exaple-dockerlatest
            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
            sudo docker image prune -a -f

#      ## 웹 이미지 빌드 및 도커허브에 push
#    - name: web docker build and push
#      run: |
#        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#        docker build -t ${{ secrets.DOCKER_REPO }}/second-eyes-web .
#        docker push ${{ secrets.DOCKER_REPO }}/second-eyes-web
#
#      ## docker compose up
#    - name: executing remote ssh commands using password
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.HOST }}
#        username: ubuntu
#        key: ${{ secrets.KEY }}
#        script: |
#          sudo docker rm -f $(docker ps -qa)
#          sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-web
#          sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-nginx
#          docker-compose up -d
#          docker image prune -f